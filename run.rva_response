#!/bin/ksh
set -x

cd $HOME
. .profile

LOGDIR=$HOME/reports/rva/rvafiles_`date +%Y%m`
LOGFILE=$LOGDIR/rva_`date +%Y%m%d%H%M%S`.log
ONCALLSQL=$HOME/sql/oncall.sql
ONCALLOUT=$HOME/reports/oncall.spool
ONCALLEMAIL=`sed '/^$/d' $ONCALLOUT | awk '{print $1}'`
ONCALLPAGER=`sed '/^$/d' $ONCALLOUT | awk '{print $2}'`
RVADIR=/neutralfile/cnet_rvback
TEMPDIR=$RVADIR/rva_selected_`date +%H%M%S`
WORKDIR=$HOME/works/rva/rva_`date +%H%M%S`
ARCHDIR=/neutralfile/archived_rva/rvafiles_`date +%Y%m`
FINDIR=$HOME/fin/rva/rvafiles_`date +%Y%m`
SQLDIR=$HOME/sql/rva
SCRIPT=$0

function ArchiveFiles {
  echo "Archiving file(s) to $HOST:$ARCHDIR" >> $LOGFILE
  ssh -x $HOST "mkdir $ARCHDIR"
  ssh -x $HOST "mv $TEMPDIR/restore.response.* $ARCHDIR"
  ssh -x $HOST "rmdir $TEMPDIR"
  return
}

function NotifyOncall {
  ERROR="ERROR $SCRIPT $ERROR"
  echo $ERROR >> $LOGFILE
  cat $LOGFILE | mailx -s "$ERROR" $ONCALLEMAIL
  echo $ERROR | mailx $ONCALLPAGER
  return
}

mkdir $LOGDIR

# Pick up on call person
# Connect to database and run script to query oncall table and spool results.
sqlplus -s $sqlplus @$ONCALLSQL $ONCALLOUT

if [[ $? -ne 0 ]]
then
  ERROR="Could not pick up on-call person."
  NotifyOncall
  exit 1
fi
ONCALLEMAIL=`sed '/^$/d' $ONCALLOUT | awk '{print $1}'`
ONCALLPAGER=`sed '/^$/d' $ONCALLOUT | awk '{print $2}'`
echo "On-call Email: $ONCALLEMAIL" >> $LOGFILE
echo "On-call Pager: $ONCALLPAGER" >> $LOGFILE

# Check to see if right number of arguments were passed
# Check to see if mode argument is one of two acceptable values.
#   a = active
#   s = standby
if [[ ( $# -ne 2 ) || ( $1 != a && $1 != s ) ]]
then
  echo "Usage: $0 [a|s] [host]" >> $LOGFILE
  ERROR="Called with wrong number of arguments."
  NotifyOncall
  exit 1
fi
MODE=$1
HOST=$2
echo "Mode: $MODE" >> $LOGFILE
echo "Host: $HOST" >> $LOGFILE

echo "***** STARTING on `date` *****" >> $LOGFILE

ssh -x $HOST "mkdir $TEMPDIR"

# Move rva files to temp directory
ssh -x $HOST "mv $RVADIR/restore.response.* $TEMPDIR"

echo "Checking for rva files on remote system..." >> $LOGFILE
FILECOUNT=`ssh -x $HOST "ls $TEMPDIR/restore.response.* | wc | awk '{print \\$1}'"`

if [[ $FILECOUNT -eq 0 ]]
then
  echo "NO RVA FILES RECEIVED" >> $LOGFILE
  echo "***** FINISHED on `date` *****" >> $LOGFILE
  ssh -x $HOST "rmdir $TEMPDIR"
  exit 0
fi
echo "Found $FILECOUNT rva file(s)" >> $LOGFILE

if [[ $MODE != a ]]
then
  echo "In STANDBY mode. Not loading rva files." >> $LOGFILE
else
  mkdir $WORKDIR

  echo "Tranferring file(s)" >> $LOGFILE
  scp $HOST:$TEMPDIR/restore.response.* $WORKDIR

  # Create call file list
  cd $WORKDIR
  set -A RVAARRAY `ls restore.response.*`
  echo "RVA files: ${RVAARRAY[*]}" >> $LOGFILE

  CURRDATE=`date +%Y%m%d%H%M%S`

  # Loop thru call files and load them into the database
  mkdir $FINDIR
  ITER=0
  while [[ $ITER -lt ${#RVAARRAY[*]} ]]
  do
    echo "Loading ${RVAARRAY[$ITER]}..." >> $LOGFILE

    echo "Checking date" >> $LOGFILE
    RVADATE="`echo ${RVAARRAY[$ITER]} | awk -F. '{print \$3}'`00"
    DIFF=`difftime $RVADATE $CURRDATE`

    # more than 1 day?
    if [[ $DIFF -gt 86400 ]]
    then
      ERROR="Invalid date - rejecting RVA file"
      NotifyOncall
      echo "RVA file not loaded - continuing..." >> $LOGFILE
      let "ITER = ITER + 1"
      continue
    fi
    echo "Date okay." >> $LOGFILE

    echo "Checking file size" >> $LOGFILE
    LINECOUNT=`wc ${RVAARRAY[$ITER]} | awk '{print $1}'`

    if [[ $LINECOUNT -eq 0 ]]
    then
      echo "RVA file is empty - nothing to load" >> $LOGFILE
      let "ITER = ITER + 1"
      continue
    fi
    echo "RVA file contains data" >> $LOGFILE

    echo "Loading RVA file into DB at `date +%H:%M:%S`" >> $LOGFILE

    # Sqlldr return codes for unix
    EX_SUCC=0
    EX_FAIL=1
    EX_WARN=2
    EX_FTL=3

    sqlldr userid=$sqlplus \
          control=$SQLDIR/rva.ctl \
              log=$FINDIR/${RVAARRAY[$ITER]}.log \
              bad=$FINDIR/${RVAARRAY[$ITER]}.bad \
             data=$WORKDIR/${RVAARRAY[$ITER]}
    STAT=$?

    # If error, log to file, email, page, and exit
    if [[ $STAT -eq $EX_FAIL || $STAT -eq $EX_FTL ]]
    then
      ERROR="ABORTED at SQLLDR"
      NotifyOncall
      ArchiveFiles
      exit 1
    elif [[ $STAT -eq $EX_WARN ]]
    then
      STATUS="with warnings"
    else
      STATUS="with no warnings"
    fi

    echo "Done loading RVA file ${RVAARRAY[$ITER]} $STATUS at `date +%H:%M:%S`" >> $LOGFILE
    ROWSLOADED=`grep "successfully loaded" $FINDIR/${RVAARRAY[$ITER]}.log`
    echo "$ROWSLOADED" >> $LOGFILE

    if [[ -f $FINDIR/${RVAARRAY[$ITER]}.bad ]]
    then
      ERROR="Bad records in rva file"
      NotifyOncall
      echo "Bad records skipped - continuing..." >> $LOGFILE
    fi
    let "ITER = ITER + 1"
  done

  sqlplus -s $sqlplus << EOF >> $LOGFILE
    set serveroutput on size 100000

    --Get static date time
    COL datetime NEW_VALUE datetime
    SELECT TO_CHAR(SYSDATE,'DD-MON-YYYY HH24:MI:SS') AS datetime FROM DUAL;

    --Process RVA responses
    DECLARE
      CURSOR rva_table IS
        SELECT *
          FROM rva_work
         WHERE processed = TO_DATE('&datetime','DD-MON-YYYY HH24:MI:SS');

      cust_rec ces_customers%ROWTYPE;
    BEGIN
      UPDATE rva_cnet rc
         SET (message_rx, received) = (
        SELECT message_rx, received
          FROM rva_work rw
         WHERE rc.event_idx = rw.event_idx
           AND rc.meter_id = rw.meter_id);

      UPDATE rva_work
         SET processed = TO_DATE('&datetime','DD-MON-YYYY HH24:MI:SS')
       WHERE processed IS NULL;

      FOR rva_rec IN rva_table
      LOOP
        IF rva_rec.util_extra_1 = 'R' THEN
          IF rva_rec.device_power_status = 'OU' OR rva_rec.device_power_status = 'RO' THEN
            BEGIN
              SELECT *
                INTO cust_rec
                FROM ces_customers
               WHERE meter_id = rva_rec.meter_id;

              INSERT INTO ces_calls ( account_number
                                    , phone_number
                                    , phone_area
				    , comments
                                    , city_state
                                    , address
                                    , account_name
                                    , device_cls
                                    , device_idx
                                    , trouble_code
                                    , date_time
                                    , ces_status
                                    , trs_status
                                    , empl_no
                                    , meter_number
                                    , meter_location
                                    , process_time)
                             VALUES ( rva_rec.meter_id
                                    , cust_rec.phone_number
                                    , cust_rec.phone_area
				    , 'CNET Ping'
                                    , cust_rec.city_state
                                    , cust_rec.address
                                    , cust_rec.account_name
                                    , 994
                                    , cust_rec.supply_idx
                                    , '1005'
                                    , to_date(rva_rec.util_extra_2,'MM/DD/YY HH24:MI:SS')
                                    , 'NEW'
                                    , 'NEW'
                                    , 'RVA'
                                    , cust_rec.meter_number
                                    , cust_rec.meter_location
                                    , SYSDATE);
            EXCEPTION
              WHEN no_data_found THEN
                DBMS_OUTPUT.PUT_LINE('No customer found for service point: '||rva_rec.meter_id);
              WHEN too_many_rows THEN
                DBMS_OUTPUT.PUT_LINE('More than one customer found for service point: '||rva_rec.meter_id);
              WHEN others THEN
                DBMS_OUTPUT.PUT_LINE('others: '||sqlcode||' '||sqlerrm);
            END;
          END IF;
        ELSIF rva_rec.util_extra_1 = 'S' THEN
          IF rva_rec.device_power_status = 'ON' THEN
            BEGIN
              SELECT *
                INTO cust_rec
                FROM ces_customers
               WHERE meter_id = rva_rec.meter_id;

              INSERT INTO ces_calls ( account_number
                                    , phone_number
                                    , phone_area
                                    , city_state
                                    , address
                                    , account_name
                                    , device_cls
                                    , device_idx
                                    , trouble_code
                                    , date_time
                                    , ces_status
                                    , trs_status
                                    , empl_no
                                    , meter_number
                                    , meter_location
                                    , process_time)
                             VALUES ( rva_rec.meter_id
                                    , cust_rec.phone_number
                                    , cust_rec.phone_area
                                    , cust_rec.city_state
                                    , cust_rec.address
                                    , cust_rec.account_name
                                    , 994
                                    , cust_rec.supply_idx
                                    , '1003'
                                    , rva_rec.last_packet_time
                                    , 'NEW'
                                    , 'NEW'
                                    , 'RVA'
                                    , cust_rec.meter_number
                                    , cust_rec.meter_location
                                    , SYSDATE);

              INSERT INTO rva_tfcc ( event_idx
                                   , meter_id
                                   , message_tx
                                   , transmitted)
                            VALUES ( rva_rec.event_idx
                                   , rva_rec.meter_id
                                   ,    to_char(to_date('&datetime','DD-MON-YYYY HH24:MI:SS'),'YYYYMMDDHH24MISS')
                                     || '3'
                                     || substr(rpad(cust_rec.meter_location,2,' '),1,2)
                                     || substr(rpad(cust_rec.meter_number,13,' '),1,13)
                                     || substr(rpad(cust_rec.account_name,20,' '),1,20)
				     || substr(lpad(nvl(substr(rva_rec.util_extra_2,4,7),cust_rec.phone_number),7,'0'),1,7)
				     || substr(lpad(nvl(substr(rva_rec.util_extra_2,1,3),cust_rec.phone_area),3,'0'),1,3)
                                     || substr(rpad(cust_rec.address,50,' '),1,50)
                                     || substr(rpad(trim(replace(substr(cust_rec.city_state,1,length(cust_rec.city_state)-3),',',' ')),10,' '),1,10)
                                     || substr(rpad(substr(cust_rec.city_state,-2,2),2,' '),1,2)
                                     || '        '
                                     || substr(rpad(cust_rec.supply_idx,10,' '),1,10)
                                     || substr(lpad(rva_rec.meter_id,10,'0'),1,10)
                                     || substr(rpad(nvl(cust_rec.priority,' '),2,' '),1,2)
                                     || '              '
                                     || '          '
                                     || '00'
                                     || substr(rva_rec.util_extra_3,2,4)
                                     || decode(substr(rva_rec.util_extra_3,1,1),'S','S','H','S','E')
                                     || substr(lpad(cust_rec.meter_id,13,' '),4,10)
                                   , NULL);
            EXCEPTION
              WHEN no_data_found THEN
                DBMS_OUTPUT.PUT_LINE('No customer found for service point: '||rva_rec.meter_id);
              WHEN too_many_rows THEN
                DBMS_OUTPUT.PUT_LINE('More than one customer found for service point: '||rva_rec.meter_id);
              WHEN others THEN
                DBMS_OUTPUT.PUT_LINE('others: '||sqlcode||' '||sqlerrm);
            END;
          END IF;
        ELSE
          DBMS_OUTPUT.PUT_LINE('Unknown Request type: '||rva_rec.message_rx);
        END IF;
      END LOOP;

      DELETE FROM rva_work
       WHERE processed = TO_DATE('&datetime','DD-MON-YYYY HH24:MI:SS');
    END;
    /

    --Spool TFCC request file
    UPDATE rva_tfcc
       SET transmitted = TO_DATE('&datetime','DD-MON-YYYY HH24:MI:SS')
     WHERE transmitted IS NULL;

    spool $WORKDIR/rva_tfcc.1
    set head off linesize 193 pagesize 0 feedback off
    SELECT message_tx
      FROM rva_tfcc
     WHERE transmitted = TO_DATE('&datetime','DD-MON-YYYY HH24:MI:SS');
    spool off

    exit
EOF

  sed -e '/^new/d' -e '/^old/d' -e '/^$/d' $WORKDIR/rva_tfcc.1 > $WORKDIR/rva_tfcc.2
  if [[ `wc $WORKDIR/rva_tfcc.2 | awk '{print $1}'` -gt 0 ]]
  then
    ERROR=`cat $WORKS/rva_tfcc.2 | /opt/mqm/samp/bin/amqsputc CALLBACKS.TO.IT`
    echo $ERROR | grep "reason code"
    if [[ $? -ne 1 ]]
    then
      echo $ERROR >> $LOGFILE
      ERROR="ABORTED at mqput"
      NotifyOncall
      exit 1
    fi
  fi

  rm -rf $WORKDIR

fi

ArchiveFiles

rm -f $WORKDIR

echo "***** FINISHED on `date` *****" >> $LOGFILE

exit 0

